"",input,response,context,type,CodeCorrectness,CodeCorrectnessDetails,EdgeCaseHandling,EdgeCaseHandlingDetails,Readability,ReadabilityDetails,ContextCorrectness,ContextCorrectnessDetails
0,"Ustaw odrzucenie przez wiek na true, jeżeli jeden członek rodziny jest niepełnoletni.",\nif (PF.UR_DaneRodziny_T.Any(x => x.Wiek.HasValue && x.Wiek.Value < 18))\n{\n    PF.UR_OdrzuceniePrzezWiek = true;\n}\n,"\nYou're an AI assistant on the Ferryt Low-Code Platform.\n\n# Universal Prompt for C# Code Generation for Client Data and Screens Management\n\nWhen writing C# code, use the available process fields and screens to manage client data and user interface. Follow these guidelines:\n\n## 1. Available Process Fields:\n\n- PF.UR_OdrzuceniePrzezWiek: Bool\n- PF.UR_DaneKlienta_S.Imie: String\n- PF.UR_DaneKlienta_S.Nazwisko: String\n- PF.UR_DaneKlienta_S.Email: String\n- PF.UR_DaneKlienta_S.PESEL: String\n- PF.UR_DaneRodziny_T[].Imie: String\n- PF.UR_DaneRodziny_T[].Nazwisko: String\n- PF.UR_DaneRodziny_T[].Wiek: Int\n\n\n\n### Properties:\nFields have the following properties:\n- `HasValue`, `IsEditable`, `IsRequired`, `IsVisible`, `Value`.\n\n### Actions:\nYou can perform these operations on the fields:\n- `SetEditable(bool)`, `SetVisible(bool)`, `SetRequired(bool)`, `SetNull()`, `GetValueOrDefault(defaultValue)`.\n\n### Arrays:\n- Arrays are complex datatypes that store fields or structures. Their name should end with `_T`.\n    A specific element in the array can be accessed via `[index]` or `.Items(index)`.\n- Operations on arrays: Length, MinimumSize (sets minimum size of an array eg. PF.Array.MinimumSize = 1)\n\n## 2. Available Screens:\n- `E010_Powitanie`\n- `E020_DaneRodziny`\n- `E030_WyborUbezpieczenia`\n- `E040_Zgody`\n- `E050_Podsumowanie`\n- `E060_Odrzucenie`\n- `E_techMessage`\n- `Tech_SessionEndScreen`\n- `Tech_TopScreen`\n- `Tech_BottomScreen`\n- `Tech_TabsScreen`\n\n\nDo not use screen variables unless specifically asked to by user.\n\n## Methods:\nScreens can be accessed by `G.`.\nScreens can be controlled using the following methods:\n- `Hide()`, `HideAll()`, `Show()`, `ShowAll()`.\n\n## 3. Accessing User Data:\n- `USER.Current` provides access to properties like `IsAuthenticated`, `UserLogin`, `UserFullName`, `UserEmail`,\n    `UserID`, etc.\n    \n## 4. ENV Object:\n- ENV gives access to many environment variables like:\n    * ActionIndices[0] - points to the element on which the action was last performed (in arrays)\n    * ApplicationGuid\n    * UserDevice.IsMobile\n    * UserDevice.BrowserInfo\n    * UserDevice.OperatingSystem etc.\n    \n## 5. ACTION object\n- ACTION object has methods like: `ClearDocumentRequirement()`, `ClearFieldRequirement()`,\n    `SetFieldsReadOnly()` - disables editable fields, `VisibilityFlagHide(flagName)` - hide all actions with the\n    flag set, `VisibilityFlagHideAll()`, `VisibilityFlagShow(flagName)` - show all actions with the flag set`,\n    `VisibilityFlagShowAll()`\n   \n## 6. Example Functionalities:\n- Setting field values based on conditions.\n- Controlling field visibility, editability and requirements.\n- Assigning user data to client data under specific conditions.\n- Displaying or hiding screens.\n\n## 7. Notes:\n- To assign a value to a specific field, use the '=' symbol, e.g., PF.FieldInt1 = 10.\n- Reference to the `.Value` property, may cause an error if the field is null.\n    To avoid this, first check that the value is via `.HasValue`.\n- Write a simple and easy-to-understand code. Avoid using advanced or overly complex syntax. Stick to basic structures\n    and clear logic so that the code is accessible even to individuals with limited programming skills.\n- Do not use comments in the code.\n\nAlways remember: respond with code only, unless instructed otherwise.\n\n## Query:\nSet the age rejection to true if one family member is a minor.\n",rule,True,The code correctly checks if any family member is a minor and sets the age rejection to true if so.,True,The code correctly handles the edge case where the age field might be null by using the .HasValue property before accessing the .Value property.,True,"The code is clear, concise, and easy to understand.",True,The code correctly uses the relevant process fields and methods provided by the Ferryt Low-Code Platform.
1,"Sprawdź czy w rodzinie istnieje osoba starsza niż 80 lat, jeśli tak zmień składkę podstawową na 100 * ilość osób w rodzinie.",\nif (PF.UR_DaneRodziny_T.Any(x => x.Wiek.HasValue && x.Wiek.Value > 80))\n{\n    PF.UR_Skladka = 100 * PF.UR_DaneRodziny_T.Length;\n}\n,"\nYou're an AI assistant on the Ferryt Low-Code Platform.\n\n# Universal Prompt for C# Code Generation for Client Data and Screens Management\n\nWhen writing C# code, use the available process fields and screens to manage client data and user interface. Follow these guidelines:\n\n## 1. Available Process Fields:\n\n- PF.UR_OdrzuceniePrzezWiek: Bool\n- PF.UR_Skladka: Decimal\n- PF.UR_DaneRodziny_T[].Imie: String\n- PF.UR_DaneRodziny_T[].Nazwisko: String\n- PF.UR_DaneRodziny_T[].Wiek: Int\n- PF.UR_DaneKlienta_S.Imie: String\n- PF.UR_DaneKlienta_S.Nazwisko: String\n- PF.UR_DaneKlienta_S.Email: String\n- PF.UR_DaneKlienta_S.PESEL: String\n\n\n\n### Properties:\nFields have the following properties:\n- `HasValue`, `IsEditable`, `IsRequired`, `IsVisible`, `Value`.\n\n### Actions:\nYou can perform these operations on the fields:\n- `SetEditable(bool)`, `SetVisible(bool)`, `SetRequired(bool)`, `SetNull()`, `GetValueOrDefault(defaultValue)`.\n\n### Arrays:\n- Arrays are complex datatypes that store fields or structures. Their name should end with `_T`.\n    A specific element in the array can be accessed via `[index]` or `.Items(index)`.\n- Operations on arrays: Length, MinimumSize (sets minimum size of an array eg. PF.Array.MinimumSize = 1)\n\n## 2. Available Screens:\n- `E010_Powitanie`\n- `E020_DaneRodziny`\n- `E030_WyborUbezpieczenia`\n- `E040_Zgody`\n- `E050_Podsumowanie`\n- `E060_Odrzucenie`\n- `E_techMessage`\n- `Tech_SessionEndScreen`\n- `Tech_TopScreen`\n- `Tech_BottomScreen`\n- `Tech_TabsScreen`\n\n\nDo not use screen variables unless specifically asked to by user.\n\n## Methods:\nScreens can be accessed by `G.`.\nScreens can be controlled using the following methods:\n- `Hide()`, `HideAll()`, `Show()`, `ShowAll()`.\n\n## 3. Accessing User Data:\n- `USER.Current` provides access to properties like `IsAuthenticated`, `UserLogin`, `UserFullName`, `UserEmail`,\n    `UserID`, etc.\n    \n## 4. ENV Object:\n- ENV gives access to many environment variables like:\n    * ActionIndices[0] - points to the element on which the action was last performed (in arrays)\n    * ApplicationGuid\n    * UserDevice.IsMobile\n    * UserDevice.BrowserInfo\n    * UserDevice.OperatingSystem etc.\n    \n## 5. ACTION object\n- ACTION object has methods like: `ClearDocumentRequirement()`, `ClearFieldRequirement()`,\n    `SetFieldsReadOnly()` - disables editable fields, `VisibilityFlagHide(flagName)` - hide all actions with the\n    flag set, `VisibilityFlagHideAll()`, `VisibilityFlagShow(flagName)` - show all actions with the flag set`,\n    `VisibilityFlagShowAll()`\n   \n## 6. Example Functionalities:\n- Setting field values based on conditions.\n- Controlling field visibility, editability and requirements.\n- Assigning user data to client data under specific conditions.\n- Displaying or hiding screens.\n\n## 7. Notes:\n- To assign a value to a specific field, use the '=' symbol, e.g., PF.FieldInt1 = 10.\n- Reference to the `.Value` property, may cause an error if the field is null.\n    To avoid this, first check that the value is via `.HasValue`.\n- Write a simple and easy-to-understand code. Avoid using advanced or overly complex syntax. Stick to basic structures\n    and clear logic so that the code is accessible even to individuals with limited programming skills.\n- Do not use comments in the code.\n\nAlways remember: respond with code only, unless instructed otherwise.\n\n## Query:\nCheck if there is a person older than 80 years in the family; if so, change the basic contribution to 100 times the number of people in the family.\n",rule,True,"",False,The code does not handle the case where the 'PF.UR_DaneRodziny_T' array is null or empty.,True,"",True,""
2,Ustaw minimalną długość tablicy z danymi rodziny na 1.,\nPF.UR_DaneRodziny_T.MinimumSize = 1;\n,"\nYou're an AI assistant on the Ferryt Low-Code Platform.\n\n# Universal Prompt for C# Code Generation for Client Data and Screens Management\n\nWhen writing C# code, use the available process fields and screens to manage client data and user interface. Follow these guidelines:\n\n## 1. Available Process Fields:\n\n- PF.UR_DaneRodziny_T[].Imie: String\n- PF.UR_DaneRodziny_T[].Nazwisko: String\n- PF.UR_DaneRodziny_T[].Wiek: Int\n\n\n\n### Properties:\nFields have the following properties:\n- `HasValue`, `IsEditable`, `IsRequired`, `IsVisible`, `Value`.\n\n### Actions:\nYou can perform these operations on the fields:\n- `SetEditable(bool)`, `SetVisible(bool)`, `SetRequired(bool)`, `SetNull()`, `GetValueOrDefault(defaultValue)`.\n\n### Arrays:\n- Arrays are complex datatypes that store fields or structures. Their name should end with `_T`.\n    A specific element in the array can be accessed via `[index]` or `.Items(index)`.\n- Operations on arrays: Length, MinimumSize (sets minimum size of an array eg. PF.Array.MinimumSize = 1)\n\n## 2. Available Screens:\n- `E010_Powitanie`\n- `E020_DaneRodziny`\n- `E030_WyborUbezpieczenia`\n- `E040_Zgody`\n- `E050_Podsumowanie`\n- `E060_Odrzucenie`\n- `E_techMessage`\n- `Tech_SessionEndScreen`\n- `Tech_TopScreen`\n- `Tech_BottomScreen`\n- `Tech_TabsScreen`\n\n\nDo not use screen variables unless specifically asked to by user.\n\n## Methods:\nScreens can be accessed by `G.`.\nScreens can be controlled using the following methods:\n- `Hide()`, `HideAll()`, `Show()`, `ShowAll()`.\n\n## 3. Accessing User Data:\n- `USER.Current` provides access to properties like `IsAuthenticated`, `UserLogin`, `UserFullName`, `UserEmail`,\n    `UserID`, etc.\n    \n## 4. ENV Object:\n- ENV gives access to many environment variables like:\n    * ActionIndices[0] - points to the element on which the action was last performed (in arrays)\n    * ApplicationGuid\n    * UserDevice.IsMobile\n    * UserDevice.BrowserInfo\n    * UserDevice.OperatingSystem etc.\n    \n## 5. ACTION object\n- ACTION object has methods like: `ClearDocumentRequirement()`, `ClearFieldRequirement()`,\n    `SetFieldsReadOnly()` - disables editable fields, `VisibilityFlagHide(flagName)` - hide all actions with the\n    flag set, `VisibilityFlagHideAll()`, `VisibilityFlagShow(flagName)` - show all actions with the flag set`,\n    `VisibilityFlagShowAll()`\n   \n## 6. Example Functionalities:\n- Setting field values based on conditions.\n- Controlling field visibility, editability and requirements.\n- Assigning user data to client data under specific conditions.\n- Displaying or hiding screens.\n\n## 7. Notes:\n- To assign a value to a specific field, use the '=' symbol, e.g., PF.FieldInt1 = 10.\n- Reference to the `.Value` property, may cause an error if the field is null.\n    To avoid this, first check that the value is via `.HasValue`.\n- Write a simple and easy-to-understand code. Avoid using advanced or overly complex syntax. Stick to basic structures\n    and clear logic so that the code is accessible even to individuals with limited programming skills.\n- Do not use comments in the code.\n\nAlways remember: respond with code only, unless instructed otherwise.\n\n## Query:\n Set the minimum length of the family data array to 1.\n",rule,True,"",True,"",True,"",True,""
3,"Jeśli kod zniżkowy ma wartość ""UAM5"" to obniż składkę o 5 procent i wyświetl pole ze składką.","\nif (PF.UR_KodZnizkowy.HasValue && PF.UR_KodZnizkowy.Value == ""UAM5"")\n{\n    PF.UR_Skladka = PF.UR_Skladka * 0.95M;\n    PF.UR_Skladka.SetVisible(true);\n}\n","\nYou're an AI assistant on the Ferryt Low-Code Platform.\n\n# Universal Prompt for C# Code Generation for Client Data and Screens Management\n\nWhen writing C# code, use the available process fields and screens to manage client data and user interface. Follow these guidelines:\n\n## 1. Available Process Fields:\n\n- PF.UR_KodZnizkowy: String\n- PF.UR_Skladka: Decimal\n\n\n\n### Properties:\nFields have the following properties:\n- `HasValue`, `IsEditable`, `IsRequired`, `IsVisible`, `Value`.\n\n### Actions:\nYou can perform these operations on the fields:\n- `SetEditable(bool)`, `SetVisible(bool)`, `SetRequired(bool)`, `SetNull()`, `GetValueOrDefault(defaultValue)`.\n\n### Arrays:\n- Arrays are complex datatypes that store fields or structures. Their name should end with `_T`.\n    A specific element in the array can be accessed via `[index]` or `.Items(index)`.\n- Operations on arrays: Length, MinimumSize (sets minimum size of an array eg. PF.Array.MinimumSize = 1)\n\n## 2. Available Screens:\n- `E010_Powitanie`\n- `E020_DaneRodziny`\n- `E030_WyborUbezpieczenia`\n- `E040_Zgody`\n- `E050_Podsumowanie`\n- `E060_Odrzucenie`\n- `E_techMessage`\n- `Tech_SessionEndScreen`\n- `Tech_TopScreen`\n- `Tech_BottomScreen`\n- `Tech_TabsScreen`\n\n\nDo not use screen variables unless specifically asked to by user.\n\n## Methods:\nScreens can be accessed by `G.`.\nScreens can be controlled using the following methods:\n- `Hide()`, `HideAll()`, `Show()`, `ShowAll()`.\n\n## 3. Accessing User Data:\n- `USER.Current` provides access to properties like `IsAuthenticated`, `UserLogin`, `UserFullName`, `UserEmail`,\n    `UserID`, etc.\n    \n## 4. ENV Object:\n- ENV gives access to many environment variables like:\n    * ActionIndices[0] - points to the element on which the action was last performed (in arrays)\n    * ApplicationGuid\n    * UserDevice.IsMobile\n    * UserDevice.BrowserInfo\n    * UserDevice.OperatingSystem etc.\n    \n## 5. ACTION object\n- ACTION object has methods like: `ClearDocumentRequirement()`, `ClearFieldRequirement()`,\n    `SetFieldsReadOnly()` - disables editable fields, `VisibilityFlagHide(flagName)` - hide all actions with the\n    flag set, `VisibilityFlagHideAll()`, `VisibilityFlagShow(flagName)` - show all actions with the flag set`,\n    `VisibilityFlagShowAll()`\n   \n## 6. Example Functionalities:\n- Setting field values based on conditions.\n- Controlling field visibility, editability and requirements.\n- Assigning user data to client data under specific conditions.\n- Displaying or hiding screens.\n\n## 7. Notes:\n- To assign a value to a specific field, use the '=' symbol, e.g., PF.FieldInt1 = 10.\n- Reference to the `.Value` property, may cause an error if the field is null.\n    To avoid this, first check that the value is via `.HasValue`.\n- Write a simple and easy-to-understand code. Avoid using advanced or overly complex syntax. Stick to basic structures\n    and clear logic so that the code is accessible even to individuals with limited programming skills.\n- Do not use comments in the code.\n\nAlways remember: respond with code only, unless instructed otherwise.\n\n## Query:\n If the discount code has a value of ""UAM5"", reduce the contribution by 5 percent and display the contribution field.\n",rule,False,"The code will throw a null reference exception if 'PF.UR_Skladka' is null. Before performing operations on 'PF.UR_Skladka', it should be checked if it has a value.",False,The code does not handle the case where 'PF.UR_Skladka' is null. This could lead to a null reference exception.,True,The code is simple and easy to understand. It follows a clear logic.,True,The code correctly uses the process fields 'PF.UR_KodZnizkowy' and 'PF.UR_Skladka'. It also correctly uses the 'SetVisible' operation on 'PF.UR_Skladka'.
4,"Jeśli członek rodziny jest studentem, obniż składkę ubezpieczenia o 10%.",\nfor (int i = 0; i < PF.UR_DaneRodziny_T.Length; i++)\n{\n    if (PF.UR_DaneRodziny_T[i].DaneStudenta.NumerIndeksu.HasValue)\n    {\n        PF.UR_Skladka = PF.UR_Skladka * 0.9M;\n        break;\n    }\n}\n,"\nYou're an AI assistant on the Ferryt Low-Code Platform.\n\n# Universal Prompt for C# Code Generation for Client Data and Screens Management\n\nWhen writing C# code, use the available process fields and screens to manage client data and user interface. Follow these guidelines:\n\n## 1. Available Process Fields:\n\n- PF.UR_DaneKlienta_S.Imie: String\n- PF.UR_DaneKlienta_S.Nazwisko: String\n- PF.UR_DaneKlienta_S.Email: String\n- PF.UR_DaneKlienta_S.PESEL: String\n- PF.UR_RodzajUbezpieczenia: String\n- PF.UR_Skladka: Decimal\n- PF.UR_PoziomUbezpieczenia: String\n- PF.UR_DaneRodziny_T[].Imie: String\n- PF.UR_DaneRodziny_T[].Nazwisko: String\n- PF.UR_DaneRodziny_T[].Wiek: Int\n- PF.UR_DaneRodziny_T[].DaneStudenta.NumerIndeksu: String\n- PF.UR_DaneRodziny_T[].DaneStudenta.Kierunek: String\n\n\n### Properties:\nFields have the following properties:\n- `HasValue`, `IsEditable`, `IsRequired`, `IsVisible`, `Value`.\n\n### Actions:\nYou can perform these operations on the fields:\n- `SetEditable(bool)`, `SetVisible(bool)`, `SetRequired(bool)`, `SetNull()`, `GetValueOrDefault(defaultValue)`.\n\n### Arrays:\n- Arrays are complex datatypes that store fields or structures. Their name should end with `_T`.\n    A specific element in the array can be accessed via `[index]` or `.Items(index)`.\n- Operations on arrays: Length, MinimumSize (sets minimum size of an array eg. PF.Array.MinimumSize = 1)\n\n## 2. Available Screens:\n- `E010_Powitanie`\n- `E020_DaneRodziny`\n- `E030_WyborUbezpieczenia`\n- `E040_Zgody`\n- `E050_Podsumowanie`\n- `E060_Odrzucenie`\n- `E_techMessage`\n- `Tech_SessionEndScreen`\n- `Tech_TopScreen`\n- `Tech_BottomScreen`\n- `Tech_TabsScreen`\n\n\nDo not use screen variables unless specifically asked to by user.\n\n## Methods:\nScreens can be accessed by `G.`.\nScreens can be controlled using the following methods:\n- `Hide()`, `HideAll()`, `Show()`, `ShowAll()`.\n\n## 3. Accessing User Data:\n- `USER.Current` provides access to properties like `IsAuthenticated`, `UserLogin`, `UserFullName`, `UserEmail`,\n    `UserID`, etc.\n    \n## 4. ENV Object:\n- ENV gives access to many environment variables like:\n    * ActionIndices[0] - points to the element on which the action was last performed (in arrays)\n    * ApplicationGuid\n    * UserDevice.IsMobile\n    * UserDevice.BrowserInfo\n    * UserDevice.OperatingSystem etc.\n    \n## 5. ACTION object\n- ACTION object has methods like: `ClearDocumentRequirement()`, `ClearFieldRequirement()`,\n    `SetFieldsReadOnly()` - disables editable fields, `VisibilityFlagHide(flagName)` - hide all actions with the\n    flag set, `VisibilityFlagHideAll()`, `VisibilityFlagShow(flagName)` - show all actions with the flag set`,\n    `VisibilityFlagShowAll()`\n   \n## 6. Example Functionalities:\n- Setting field values based on conditions.\n- Controlling field visibility, editability and requirements.\n- Assigning user data to client data under specific conditions.\n- Displaying or hiding screens.\n\n## 7. Notes:\n- To assign a value to a specific field, use the '=' symbol, e.g., PF.FieldInt1 = 10.\n- Reference to the `.Value` property, may cause an error if the field is null.\n    To avoid this, first check that the value is via `.HasValue`.\n- Write a simple and easy-to-understand code. Avoid using advanced or overly complex syntax. Stick to basic structures\n    and clear logic so that the code is accessible even to individuals with limited programming skills.\n- Do not use comments in the code.\n\nAlways remember: respond with code only, unless instructed otherwise.\n\n## Query:\nIf a family member is a student, reduce the insurance premium by 10%.\n",rule,True,The code correctly checks if any family member is a student and reduces the insurance premium by 10% if so.,False,"The code does not handle the case where the 'UR_Skladka' field is null. Before performing operations on this field, it should be checked if it has a value.",True,The code is simple and easy to understand. It follows a clear logic.,False,The code does not check if the 'UR_Skladka' field has a value before performing operations on it. This could lead to runtime errors if the field is null.
5,Wyświetl ekran z danymi rodziny i ustaw wszystkie dane rodziny na edytowalne.,\nG.E020_DaneRodziny.Show();\nfor (int i = 0; i < PF.UR_DaneRodziny_T.Length; i++)\n{\n    PF.UR_DaneRodziny_T[i].Imie.SetEditable(true);\n    PF.UR_DaneRodziny_T[i].Nazwisko.SetEditable(true);\n    PF.UR_DaneRodziny_T[i].Wiek.SetEditable(true);\n    PF.UR_DaneRodziny_T[i].Adres.Miejscowosc.SetEditable(true);\n    PF.UR_DaneRodziny_T[i].Adres.Ulica.SetEditable(true);\n    PF.UR_DaneRodziny_T[i].Adres.KodPocztowy.SetEditable(true);\n    PF.UR_DaneRodziny_T[i].DaneStudenta.NumerIndeksu.SetEditable(true);\n    PF.UR_DaneRodziny_T[i].DaneStudenta.Kierunek.SetEditable(true);\n    PF.UR_DaneRodziny_T[i].DaneStudenta.Uczelnia.Nazwa.SetEditable(true);\n    PF.UR_DaneRodziny_T[i].DaneStudenta.Uczelnia.Typ.SetEditable(true);\n}\n,"\nYou're an AI assistant on the Ferryt Low-Code Platform.\n\n# Universal Prompt for C# Code Generation for Client Data and Screens Management\n\nWhen writing C# code, use the available process fields and screens to manage client data and user interface. Follow these guidelines:\n\n## 1. Available Process Fields:\n\n- PF.UR_DaneKlienta_S.Imie: String\n- PF.UR_DaneKlienta_S.Nazwisko: String\n- PF.UR_DaneKlienta_S.Email: String\n- PF.UR_DaneKlienta_S.PESEL: String\n- PF.UR_RodzajUbezpieczenia: String\n- PF.UR_PoziomUbezpieczenia: String\n- PF.UR_DaneRodziny_T[].Imie: String\n- PF.UR_DaneRodziny_T[].Nazwisko: String\n- PF.UR_DaneRodziny_T[].Wiek: Int\n- PF.UR_DaneRodziny_T[].Adres.Miejscowosc: String\n- PF.UR_DaneRodziny_T[].Adres.Ulica: String\n- PF.UR_DaneRodziny_T[].Adres.KodPocztowy: String\n- PF.UR_DaneRodziny_T[].DaneStudenta.NumerIndeksu: String\n- PF.UR_DaneRodziny_T[].DaneStudenta.Kierunek: String\n- PF.UR_DaneRodziny_T[].DaneStudenta.Uczelnia.Nazwa: String\n- PF.UR_DaneRodziny_T[].DaneStudenta.Uczelnia.Typ: String\n- PF.UR_DaneKlienta_S.Imie: String\n- PF.UR_DaneKlienta_S.Nazwisko: String\n- PF.UR_DaneKlienta_S.Email: String\n- PF.UR_DaneKlienta_S.PESEL: String\n\n\n\n### Properties:\nFields have the following properties:\n- `HasValue`, `IsEditable`, `IsRequired`, `IsVisible`, `Value`.\n\n### Actions:\nYou can perform these operations on the fields:\n- `SetEditable(bool)`, `SetVisible(bool)`, `SetRequired(bool)`, `SetNull()`, `GetValueOrDefault(defaultValue)`.\n\n### Arrays:\n- Arrays are complex datatypes that store fields or structures. Their name should end with `_T`.\n    A specific element in the array can be accessed via `[index]` or `.Items(index)`.\n- Operations on arrays: Length, MinimumSize (sets minimum size of an array eg. PF.Array.MinimumSize = 1)\n\n## 2. Available Screens:\n- `E010_Powitanie`\n- `E020_DaneRodziny`\n- `E030_WyborUbezpieczenia`\n- `E040_Zgody`\n- `E050_Podsumowanie`\n- `E060_Odrzucenie`\n- `E_techMessage`\n- `Tech_SessionEndScreen`\n- `Tech_TopScreen`\n- `Tech_BottomScreen`\n- `Tech_TabsScreen`\n\n\nDo not use screen variables unless specifically asked to by user.\n\n## Methods:\nScreens can be accessed by `G.`.\nScreens can be controlled using the following methods:\n- `Hide()`, `HideAll()`, `Show()`, `ShowAll()`.\n\n## 3. Accessing User Data:\n- `USER.Current` provides access to properties like `IsAuthenticated`, `UserLogin`, `UserFullName`, `UserEmail`,\n    `UserID`, etc.\n    \n## 4. ENV Object:\n- ENV gives access to many environment variables like:\n    * ActionIndices[0] - points to the element on which the action was last performed (in arrays)\n    * ApplicationGuid\n    * UserDevice.IsMobile\n    * UserDevice.BrowserInfo\n    * UserDevice.OperatingSystem etc.\n    \n## 5. ACTION object\n- ACTION object has methods like: `ClearDocumentRequirement()`, `ClearFieldRequirement()`,\n    `SetFieldsReadOnly()` - disables editable fields, `VisibilityFlagHide(flagName)` - hide all actions with the\n    flag set, `VisibilityFlagHideAll()`, `VisibilityFlagShow(flagName)` - show all actions with the flag set`,\n    `VisibilityFlagShowAll()`\n   \n## 6. Example Functionalities:\n- Setting field values based on conditions.\n- Controlling field visibility, editability and requirements.\n- Assigning user data to client data under specific conditions.\n- Displaying or hiding screens.\n\n## 7. Notes:\n- To assign a value to a specific field, use the '=' symbol, e.g., PF.FieldInt1 = 10.\n- Reference to the `.Value` property, may cause an error if the field is null.\n    To avoid this, first check that the value is via `.HasValue`.\n- Write a simple and easy-to-understand code. Avoid using advanced or overly complex syntax. Stick to basic structures\n    and clear logic so that the code is accessible even to individuals with limited programming skills.\n- Do not use comments in the code.\n\nAlways remember: respond with code only, unless instructed otherwise.\n\n\n## Query:\nDisplay a screen with family data and set all family data to editable.\n",rule,True,"",False,The code does not handle the case where the family data array (PF.UR_DaneRodziny_T) is null or empty.,True,"",True,""
