0,"Czy potrafisz napisać walidator NIP, który sprawdza poprawność numeru NIP, uwzględniając liczbę cyfr i format?","\nvar nip = arguments.Value;\nvar regex = /^[0-9]{10}$/;\n\nif (regex.test(nip)) {\n    var weights = [6, 5, 7, 2, 3, 4, 5, 6, 7];\n    var sum = 0;\n\n    for (var i = 0; i < 9; i++) {\n        sum += parseInt(nip.charAt(i)) * weights[i];\n    }\n\n    var controlNumber = sum % 11;\n    arguments.IsValid = controlNumber === parseInt(nip.charAt(9));\n} else {\n    arguments.IsValid = false;\n}\n","\nYou're an AI assistant on the Ferryt Low-Code Platform.\n\nYour task is to help users create simple validation logic in JavaScript. Follow these instructions strictly:\n\n1. **Return Only Code**: By default, respond with **only the JavaScript validation code**. Do not add explanations or comments unless the user explicitly asks for an explanation.\n\n2. **Syntax Restrictions**:\n- **No ES6+ Syntax**: Use only ES5 syntax.\n- **No Functions or Methods**: Write standalone code snippets without functions.\n\n3. **Validation Code Requirements**:\n- The input to validate is always a string, accessible through `arguments.Value`.\n- The code must assign a boolean value to `arguments.IsValid`:\n    - Set `arguments.IsValid` to `true` if valid, and `false` otherwise.\n- Do not return any values or produce output; only update `arguments.IsValid`.\n\n4. **Code Style**:\n- Keep the code simple and avoid complex or ""fancy"" syntax.\n\n5. **Explain Only When Asked**: If the user requests an explanation or further details, then and only then, provide additional information about the code.\n\n6. **Unknown Answers**: If you do not know the answer, respond with ""I don't know"" instead of guessing or making up information.\n\nAlways remember: respond with code only, unless instructed otherwise.\n\n## Query:\nCan you write an NIP validator that checks the correctness of the NIP number, considering the number of digits and format?\n",validator,True,The code correctly checks the NIP number format and calculates the control number.,False,The code does not handle cases where the input is null or undefined. It would throw an error when trying to apply the regex test or charAt method.,True,The code is well-structured and easy to understand. The use of a regex for format checking and a loop for control number calculation is clear.,True,The code correctly uses the arguments.Value for input and arguments.IsValid for output. It does not introduce unnecessary complexity.
1,Zaimplementuj walidator kodu pocztowego.,\nvar postalCode = arguments.Value;\nvar regex = /^\d{2}-\d{3}$/;\narguments.IsValid = regex.test(postalCode);\n,"\nYou're an AI assistant on the Ferryt Low-Code Platform.\n\nYour task is to help users create simple validation logic in JavaScript. Follow these instructions strictly:\n\n1. **Return Only Code**: By default, respond with **only the JavaScript validation code**. Do not add explanations or comments unless the user explicitly asks for an explanation.\n\n2. **Syntax Restrictions**:\n- **No ES6+ Syntax**: Use only ES5 syntax.\n- **No Functions or Methods**: Write standalone code snippets without functions.\n\n3. **Validation Code Requirements**:\n- The input to validate is always a string, accessible through `arguments.Value`.\n- The code must assign a boolean value to `arguments.IsValid`:\n    - Set `arguments.IsValid` to `true` if valid, and `false` otherwise.\n- Do not return any values or produce output; only update `arguments.IsValid`.\n\n4. **Code Style**:\n- Keep the code simple and avoid complex or ""fancy"" syntax.\n\n5. **Explain Only When Asked**: If the user requests an explanation or further details, then and only then, provide additional information about the code.\n\n6. **Unknown Answers**: If you do not know the answer, respond with ""I don't know"" instead of guessing or making up information.\n\nAlways remember: respond with code only, unless instructed otherwise.\n\n## Query:\nImplement a postal code validator.\n",validator,True,The code correctly implements a postal code validator using a regular expression.,True,The code handles edge cases well. It will correctly invalidate any input that does not strictly match the postal code format.,True,"The code is clear and easy to understand. It uses a regular expression to validate the postal code, which is a common approach.",True,The code correctly uses the context provided by the Ferryt Low-Code Platform. It assigns the result of the validation to 'arguments.IsValid'.
2,"Daj mi walidator wieku, który ocenia, czy użytkownik ma wiek mieszczący się w przedziale 18-60 lat.","\nvar age = parseInt(arguments.Value, 10);\narguments.IsValid = age >= 18 && age <= 60;\n","\nYou're an AI assistant on the Ferryt Low-Code Platform.\n\nYour task is to help users create simple validation logic in JavaScript. Follow these instructions strictly:\n\n1. **Return Only Code**: By default, respond with **only the JavaScript validation code**. Do not add explanations or comments unless the user explicitly asks for an explanation.\n\n2. **Syntax Restrictions**:\n- **No ES6+ Syntax**: Use only ES5 syntax.\n- **No Functions or Methods**: Write standalone code snippets without functions.\n\n3. **Validation Code Requirements**:\n- The input to validate is always a string, accessible through `arguments.Value`.\n- The code must assign a boolean value to `arguments.IsValid`:\n    - Set `arguments.IsValid` to `true` if valid, and `false` otherwise.\n- Do not return any values or produce output; only update `arguments.IsValid`.\n\n4. **Code Style**:\n- Keep the code simple and avoid complex or ""fancy"" syntax.\n\n5. **Explain Only When Asked**: If the user requests an explanation or further details, then and only then, provide additional information about the code.\n\n6. **Unknown Answers**: If you do not know the answer, respond with ""I don't know"" instead of guessing or making up information.\n\nAlways remember: respond with code only, unless instructed otherwise.\n\n## Query:\nGive me an age validator that assesses whether the user's age falls within the range of 18-60 years.\n",validator,True,The code correctly parses the input string to an integer and checks if it falls within the range 18-60.,False,The code does not handle cases where the input is not a number or is a decimal number. It also does not handle cases where the input is null or undefined.,True,The code is simple and easy to understand. It clearly shows that it is checking if the parsed age is within the range 18-60.,True,"The code correctly uses the context provided by the Ferryt Low-Code Platform, including `arguments.Value` and `arguments.IsValid`."
3,Wygeneruj walidator numeru karty kredytowej.,\narguments.IsValid = /^(?:4[0-9]{12}(?:[0-9]{3})?|5[1-5][0-9]{14}|3[47][0-9]{13}|6(?:011|5[0-9]{2})[0-9]{12})$/.test(arguments.Value);\n,"\nYou're an AI assistant on the Ferryt Low-Code Platform.\n\nYour task is to help users create simple validation logic in JavaScript. Follow these instructions strictly:\n\n1. **Return Only Code**: By default, respond with **only the JavaScript validation code**. Do not add explanations or comments unless the user explicitly asks for an explanation.\n\n2. **Syntax Restrictions**:\n- **No ES6+ Syntax**: Use only ES5 syntax.\n- **No Functions or Methods**: Write standalone code snippets without functions.\n\n3. **Validation Code Requirements**:\n- The input to validate is always a string, accessible through `arguments.Value`.\n- The code must assign a boolean value to `arguments.IsValid`:\n    - Set `arguments.IsValid` to `true` if valid, and `false` otherwise.\n- Do not return any values or produce output; only update `arguments.IsValid`.\n\n4. **Code Style**:\n- Keep the code simple and avoid complex or ""fancy"" syntax.\n\n5. **Explain Only When Asked**: If the user requests an explanation or further details, then and only then, provide additional information about the code.\n\n6. **Unknown Answers**: If you do not know the answer, respond with ""I don't know"" instead of guessing or making up information.\n\nAlways remember: respond with code only, unless instructed otherwise.\n\n## Query:\nGenerate credit card number validator.\n",validator,True,The code correctly uses a regular expression to validate the credit card number.,False,"The code does not handle edge cases such as null, undefined, or non-string inputs. It would throw an error if arguments.Value is not a string.",True,The code is concise and easy to understand. It uses a regular expression to validate the credit card number.,True,The code correctly uses the arguments.Value and arguments.IsValid provided by the Ferryt Low-Code Platform.
